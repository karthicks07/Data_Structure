#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node *next;
}*head=NULL,*new,*temp,*a,*b;
void insert()
{
    int vlu,i=0;
    printf("Enter the number - ");
    scanf("%d",&vlu);
    new=(struct node *)malloc(sizeof(struct node));
    new->data=vlu;
    new->next=NULL;
    if(head==NULL)
    {
        head=new;
        new->next=head;
    }
    else
    {
        new->next=head->next;
        head->next=new;
        head=new;
    }
    printf("Inserted.\n");
    
}
void insertFront()
{
    int vlu;
    new=(struct node *)malloc(sizeof(struct node));
    printf("Enter the number - ");
    scanf("%d",&vlu);
    new->data=vlu;
    new->next=NULL;
    temp=head;
    if(head==NULL)
    {
        head=new;
        new->next=head;
    }
    else
    {
        new->next=head->next;
        head->next=new;
       
    }
    printf("Inserted.\n");
}
void insertMid()
{
    int vlu, pos, i = 1;
  printf ("Enter the position-");
  scanf ("%d", &pos);
  printf ("Enter the number-");
  scanf ("%d", &vlu);
  new = (struct node *) malloc (sizeof (struct node));
  new->data = vlu;
  new->next = NULL;
  temp = head;
  if (head == NULL)
    {
      head = new;
    }
  else
    {
      while (i < pos - 1)
	{
	  temp = temp->next;
	  i++;
	}
      new->next = temp->next;
      temp->next = new;
    }
  printf ("%d is Inserted in the position %d.\n", vlu, pos);
}

void insertLast()
{
    printf("Enter the number - ");
    new=(struct node *)malloc(sizeof(struct node));
    scanf("%d",&new->data);
    new->next=NULL;
    new->next=head->next;
    head->next=new;
    head=new;
    printf("Inserted.\n");
}
void deleteFront()
{
   if(head==NULL)
   {
    printf("Empty list!!\n");
   }
    else if(head==head->next)
    {
    printf("Deleted\n");
    head=NULL;
    }
    else
    {
    head->next=head->next->next;
    printf("Deleted\n");
    }
}
void deleteLast()
{
    
   if(head==NULL)
   {
    printf("Empty list!!\n");
   }
    temp=head->next;
    while(temp->next!=head->next)
    {
        a=temp;
        temp=temp->next;
    }
    a->next=head->next;
    head=a;
    a=NULL;
    printf("Deleted.\n");
}
void deleteMid()
{
    
   if(head==NULL)
   {
    printf("Empty list!!\n");
   }
    temp=head->next;
    int pos,i=1;
    printf("Enter the position to delete a node\n");
    scanf("%d",&pos);
    while(i<pos)
    {
        temp=temp->next;
        i++;
    }
    temp->next=temp->next->next;
    printf("Deleted.\n");
}
void display()
{
    
   if(head==NULL)
   {
    printf("Empty list!!\n");
   }
    else
    {
    b=head->next;
    while(b->next!=head->next)
    {
        printf("%d ",b->data);
        b=b->next;
    }
    printf("%d ",b->data);
    }
}
void main()
{
    int z;
    while(z!=0)
    {
        printf("\nPress 1 to insert a node\n");
        printf("Press 2 to insert at front\n");
        printf("Press 3 to insert at specific position\n");
        printf("Press 4 to insert at last\n");
        printf("Press 5 to delete at front\n");
        printf("Press 6 to delete at specific position\n");
        printf("Press 7 to delete at last\n");
        printf("Press 8 to display the list\n");
         scanf("%d",&z);
         if(z<9)
         {
             switch(z)
             {
                 case 1 :
                 insert();
                 break;
                 case 2 :
                 insertFront();
                 break;
                 case 3 :
                 insertMid();
                 break;
                 case 4 :
                 insertLast();
                 break;
                 case 5 :
                 deleteFront();
                 break;
                 case 6 :
                 deleteMid();
                 break;
                 case 7 :
                 deleteLast();
                 break;
                 case 8 : 
                 display();
                 break;
             }
         }
         else{
         printf("Enter valid number!!!\n");
         break;
         }
    }
}







